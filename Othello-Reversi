<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Reversi / Othello â€” Single File</title>
  <style>
    :root{
      --bg1:#0f172a;
      --bg2:#071033;
      --accent:#06b6d4;
      --white:#f8fafc;
      --black:#0b0b0b;
      font-family:Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }
    *{box-sizing:border-box}
    html,body{height:100%;margin:0}
    body{
      background:linear-gradient(120deg,var(--bg1), var(--bg2));
      color:var(--white);
      display:flex;
      align-items:center;
      justify-content:center;
      padding:10px;
    }
    .container{
      display:flex;
      flex-direction:column;
      gap:10px;
      align-items:center;
      max-width:100%;
    }
    .board{
      display:grid;
      grid-template-columns: repeat(8, 1fr);
      grid-template-rows: repeat(8, 1fr);
      gap:4px;
      width: 80vmin;
      height: 80vmin;
      max-width: 100vw;
      max-height: 100vh;
      box-sizing: border-box;
    }
    .cell{
      background: #0f3b2e;
      border-radius:5px;
      display:flex;
      align-items:center;
      justify-content:center;
      cursor:pointer;
      position:relative;
    }
    .disk{
      width:80%;
      height:80%;
      border-radius:50%;
    }
    .disk.black{background:#000}
    .disk.white{background:#fff}
    .hint-dot{
      position:absolute;
      width:15%;
      height:15%;
      border-radius:50%;
      background:var(--accent);
    }
    .info{
      display:flex;
      gap:10px;
      flex-wrap:wrap;
      justify-content:center;
    }
    .chip{
      padding:5px 10px;
      border-radius:5px;
      background:rgba(255,255,255,0.1);
      display:flex;
      align-items:center;
      gap:5px;
    }
    button{
      padding:5px 10px;
      border:none;
      border-radius:5px;
      cursor:pointer;
      background:var(--accent);
      color:white;
      font-weight:bold;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="board" id="board"></div>
    <div class="info">
      <div class="chip"><div style="width:16px;height:16px;background:black;border-radius:50%"></div> <span id="blackScore">2</span></div>
      <div class="chip"><div style="width:16px;height:16px;background:white;border-radius:50%"></div> <span id="whiteScore">2</span></div>
      <div class="chip" id="turnIndicator">Black to move</div>
    </div>
    <div class="info">
      <button id="restartBtn">Restart</button>
      <button id="hintBtn">Toggle Hints</button>
      <button id="passBtn">Pass</button>
      <button id="undoBtn">Undo</button>
    </div>
    <div id="status"></div>
  </div>

<script>
(() => {
  const SIZE = 8;
  let board = [];
  let current = 1;
  let showHints = true;
  let history = [];

  const dirs = [
    [-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]
  ];

  const boardEl = document.getElementById('board');
  const blackScoreEl = document.getElementById('blackScore');
  const whiteScoreEl = document.getElementById('whiteScore');
  const turnIndicator = document.getElementById('turnIndicator');
  const restartBtn = document.getElementById('restartBtn');
  const hintBtn = document.getElementById('hintBtn');
  const passBtn = document.getElementById('passBtn');
  const undoBtn = document.getElementById('undoBtn');
  const statusEl = document.getElementById('status');

  function coordToIdx(r,c){return r*SIZE+c}
  function inBounds(r,c){return r>=0 && r<SIZE && c>=0 && c<SIZE}
  function cloneBoard(){return board.slice()}
  function getOpponent(p){return p===1?2:1}

  function initBoard(){
    board = new Array(SIZE*SIZE).fill(0);
    const mid = SIZE/2;
    board[coordToIdx(mid-1,mid-1)] = 2;
    board[coordToIdx(mid,mid)] = 2;
    board[coordToIdx(mid-1,mid)] = 1;
    board[coordToIdx(mid,mid-1)] = 1;
    current = 1;
    history = [];
    statusEl.textContent = '';
    updateUI();
  }

  function tilesToFlip(r,c,p){
    const opponent = getOpponent(p);
    const flips = [];
    for(const [dr,dc] of dirs){
      let rr=r+dr, cc=c+dc;
      const line = [];
      while(inBounds(rr,cc) && board[coordToIdx(rr,cc)]===opponent){
        line.push(coordToIdx(rr,cc));
        rr+=dr; cc+=dc;
      }
      if(line.length && inBounds(rr,cc) && board[coordToIdx(rr,cc)]===p){
        flips.push(...line);
      }
    }
    return flips;
  }

  function getValidMoves(p){
    const valid = new Map();
    for(let r=0;r<SIZE;r++){
      for(let c=0;c<SIZE;c++){
        const idx=coordToIdx(r,c);
        if(board[idx]!==0) continue;
        const flips=tilesToFlip(r,c,p);
        if(flips.length) valid.set(idx,flips);
      }
    }
    return valid;
  }

  function applyMove(idx,p,flips){
    history.push({board:cloneBoard(),current});
    board[idx]=p;
    for(const f of flips) board[f]=p;
  }

  function updateUI(){
    boardEl.innerHTML='';
    let valid=getValidMoves(current);
    // Special rule: if no valid moves, allow placing anywhere empty
    if(valid.size===0){
      for(let i=0;i<SIZE*SIZE;i++){
        if(board[i]===0) valid.set(i,[]);
      }
      statusEl.textContent = (current===1?'Black':'White') + ' can place anywhere (no normal moves)';
    } else {
      statusEl.textContent = '';
    }

    for(let r=0;r<SIZE;r++){
      for(let c=0;c<SIZE;c++){
        const idx=coordToIdx(r,c);
        const cell=document.createElement('div');
        cell.className='cell';
        if(showHints && valid.has(idx)){
          const dot=document.createElement('div');
          dot.className='hint-dot';
          cell.appendChild(dot);
        }
        if(board[idx]!==0){
          const disk=document.createElement('div');
          disk.className='disk ' + (board[idx]===1?'black':'white');
          cell.appendChild(disk);
        }
        cell.onclick=()=>{
          if(!valid.has(idx)) return;
          const flips = tilesToFlip(r,c,current);
          applyMove(idx,current,flips);
          current=getOpponent(current);
          updateUI();
        };
        boardEl.appendChild(cell);
      }
    }
    const b=board.filter(v=>v===1).length;
    const w=board.filter(v=>v===2).length;
    blackScoreEl.textContent=b;
    whiteScoreEl.textContent=w;
    turnIndicator.textContent=(current===1?'Black':'White')+' to move';
  }

  restartBtn.onclick=()=>initBoard();
  hintBtn.onclick=()=>{showHints=!showHints;updateUI();};
  passBtn.onclick=()=>{current=getOpponent(current);updateUI();};
  undoBtn.onclick=()=>{
    if(history.length===0) return;
    const last=history.pop();
    board=last.board;
    current=last.current;
    updateUI();
  };

  initBoard();
})();
</script>
</body>
</html>
